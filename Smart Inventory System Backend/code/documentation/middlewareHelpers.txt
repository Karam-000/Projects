MIDDLEWARE DOCUMENTATION v1.2
=============================

BASE COMPONENTS:
- Authentication
- Authorization
- Request Validation
- Error Handling
- Logging

1. AUTHENTICATION MIDDLEWARE
----------------------------
Location: middlewares/authMiddleware.js

1.1 authenticateCustomer
- Validates customer JWT tokens (secret: '0000')
- Checks token against UserSessions table
- Attaches user data to request (id, username)
- Automatically cleans up expired tokens
- Used in protected customer routes

Usage:
router.get('/customer', authenticateCustomer, (req, res) => {...})

Error Responses:
401 Unauthorized:
- Missing token
- Token expired (auto-deletes from UserSessions)
- Token revoked
- Invalid token
- Session not found

Token Renewal:
- POST /renew-token endpoint available
- Requires old valid token
- Updates UserSessions with new token

2. AUTHORIZATION MIDDLEWARE
---------------------------
2.1 adminMiddleware(department)
- Validates employee JWT tokens (secret: '1234')
- Checks token against EmployeeLogin table
- Enforces department-level access control
- Attaches employee data to request (id, name, department)
- Departments: HR, IT, WAREHOUSE, FINANCE
- Automatically cleans up expired tokens

Usage:
router.post('/hr', adminMiddleware('HR'), (req, res) => {...})

Error Responses:
401 Unauthorized:
- Missing token
- Invalid/expired token (auto-deletes from EmployeeLogin)

403 Forbidden:
- Department access denied

Token Renewal:
- POST /renew-employee-token endpoint available
- Requires old valid token
- Updates EmployeeLogin with new token

3. VALIDATION MIDDLEWARE
------------------------
3.1 validateRequest(schema)
- Validates request bodies against Joi schemas
- Returns 400 with error details if invalid

Example Schema:
{
  username: Joi.string().min(4).required(),
  password: Joi.string().min(12).required()
}

4. ERROR HANDLING
-----------------
4.1 errorHandler
- Centralized error processing
- Formats consistent error responses
- Logs errors to system

Error Response Format:
{
  "error": "ERROR_CODE",
  "message": "Human-readable message",
  "details": ["array", "of", "details"],
  "timestamp": "ISO8601"
}

5. LOGGING MIDDLEWARE
---------------------
5.1 requestLogger
- Logs all incoming requests
- Captures: method, path, IP, user-agent
- Response time measurement

5.2 auditLogger
- Logs sensitive operations
- Tracks: who, what, when
- Stores in audit database

PERFORMANCE METRICS:
- Middleware overhead: 5-15ms per request
- Token verification: 8-12ms
- Role checking: 2-5ms  
- Request validation: 3-8ms

SECURITY:
- All middleware are stateless
- No sensitive data in logs
- Rate limiting built-in
- CSRF protection enabled

6. HELPER FUNCTIONS (Helpers/helpers.js)
----------------------------------------
6.1 checkValidEmployeeToken(token)
- Validates employee JWT tokens against database
- Handles token expiration and cleanup
- Returns decoded token or false

6.2 checkTokenInSession(token)
- Validates customer JWT tokens against session store
- Automatically cleans up expired tokens
- Returns decoded token or false

6.3 checkResetToken(token)
- Validates password reset tokens
- Returns customer ID if valid

6.4 markTokenAsUsed(token)
- Marks reset tokens as used in database

6.5 cleanupExpiredTokens()
- Scheduled task to clean up expired tokens

DEPENDENCIES:
- jsonwebtoken@8.5.1
- joi@17.4.2
- winston@3.3.3
- express-rate-limit@5.5.1
- bcryptjs@2.4.3
- crypto@1.0.1
